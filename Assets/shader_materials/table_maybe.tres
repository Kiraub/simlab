[gd_resource type="ShaderMaterial" load_steps=24 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.1 ]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, -1.0 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
output_port_for_preview = 0
function = 12

[sub_resource type="VisualShaderNodeColorConstant" id=4]
constant = Color( 0.328125, 0.189487, 0.0551147, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.15 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, -1.0 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=8]
output_port_for_preview = 0
function = 12

[sub_resource type="VisualShaderNodeColorOp" id=9]
output_port_for_preview = 0
operator = 7

[sub_resource type="VisualShaderNodeInput" id=10]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarOp" id=11]
default_input_values = [ 0, 0.0, 1, -1.0 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShaderNodeScalarOp" id=13]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.2 ]

[sub_resource type="VisualShaderNodeScalarFunc" id=14]
output_port_for_preview = 0
function = 12

[sub_resource type="VisualShaderNodeColorOp" id=15]
output_port_for_preview = 0
operator = 7

[sub_resource type="VisualShaderNodeVectorOp" id=16]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.5, 0.5, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorDecompose" id=17]

[sub_resource type="VisualShaderNodeScalarFunc" id=18]
output_port_for_preview = 0
function = 12

[sub_resource type="VisualShaderNodeScalarFunc" id=19]
output_port_for_preview = 0
function = 12

[sub_resource type="VisualShaderNodeVectorCompose" id=20]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorLen" id=21]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarFunc" id=22]
output_port_for_preview = 0
function = 15

[sub_resource type="VisualShader" id=23]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Color:14
	vec3 n_out14p0;
	float n_out14p1;
	n_out14p0 = vec3(0.328125,0.189487,0.055115);
	n_out14p1 = 1.000000;

// Input:2
	vec3 n_out2p0;
	n_out2p0 = vec3(UV,0.0);

// VectorOp:3
	vec3 n_in3p1 = vec3(0.50000,0.50000,0.00000);
	vec3 n_out3p0;
	n_out3p0 = n_out2p0 - n_in3p1;

// VectorDecompose:4
	float n_out4p0;
	float n_out4p1;
	float n_out4p2;
	n_out4p0 = n_out3p0.x;
	n_out4p1 = n_out3p0.y;
	n_out4p2 = n_out3p0.z;

// ScalarFunc:5
	float n_out5p0;
	n_out5p0 = abs(n_out4p0);

// ScalarFunc:6
	float n_out6p0;
	n_out6p0 = abs(n_out4p1);

// VectorCompose:7
	float n_in7p2 = 0.00000;
	vec3 n_out7p0;
	n_out7p0 = vec3( n_out5p0 , n_out6p0 , n_in7p2 );

// VectorLen:8
	float n_out8p0;
	n_out8p0 = length( n_out7p0 );

// ScalarOp:15
	float n_in15p1 = 0.15000;
	float n_out15p0;
	n_out15p0 = n_out8p0 + n_in15p1;

// ScalarFunc:16
	float n_out16p0;
	n_out16p0 = round(n_out15p0);

// ScalarOp:17
	float n_in17p1 = -1.00000;
	float n_out17p0;
	n_out17p0 = n_out16p0 + n_in17p1;

// ScalarFunc:18
	float n_out18p0;
	n_out18p0 = abs(n_out17p0);

// ColorOp:19
	vec3 n_out19p0;
	{
		float base=n_out14p0.x;
		float blend=vec3(n_out18p0).x;
		if (base < 0.5) {
			n_out19p0.x = (base * (blend+0.5));
		} else {
			n_out19p0.x = (1.0 - (1.0-base) * (1.0-(blend-0.5)));
		}
	}
	{
		float base=n_out14p0.y;
		float blend=vec3(n_out18p0).y;
		if (base < 0.5) {
			n_out19p0.y = (base * (blend+0.5));
		} else {
			n_out19p0.y = (1.0 - (1.0-base) * (1.0-(blend-0.5)));
		}
	}
	{
		float base=n_out14p0.z;
		float blend=vec3(n_out18p0).z;
		if (base < 0.5) {
			n_out19p0.z = (base * (blend+0.5));
		} else {
			n_out19p0.z = (1.0 - (1.0-base) * (1.0-(blend-0.5)));
		}
	}

// ScalarOp:22
	float n_in22p1 = 0.20000;
	float n_out22p0;
	n_out22p0 = n_out8p0 + n_in22p1;

// ScalarFunc:21
	float n_out21p0;
	n_out21p0 = round(n_out22p0);

// ScalarOp:20
	float n_in20p1 = -1.00000;
	float n_out20p0;
	n_out20p0 = n_out21p0 + n_in20p1;

// ScalarFunc:23
	float n_out23p0;
	n_out23p0 = abs(n_out20p0);

// ColorOp:24
	vec3 n_out24p0;
	{
		float base=n_out19p0.x;
		float blend=vec3(n_out23p0).x;
		if (base < 0.5) {
			n_out24p0.x = (base * (blend+0.5));
		} else {
			n_out24p0.x = (1.0 - (1.0-base) * (1.0-(blend-0.5)));
		}
	}
	{
		float base=n_out19p0.y;
		float blend=vec3(n_out23p0).y;
		if (base < 0.5) {
			n_out24p0.y = (base * (blend+0.5));
		} else {
			n_out24p0.y = (1.0 - (1.0-base) * (1.0-(blend-0.5)));
		}
	}
	{
		float base=n_out19p0.z;
		float blend=vec3(n_out23p0).z;
		if (base < 0.5) {
			n_out24p0.z = (base * (blend+0.5));
		} else {
			n_out24p0.z = (1.0 - (1.0-base) * (1.0-(blend-0.5)));
		}
	}

// ScalarOp:10
	float n_in10p1 = 0.10000;
	float n_out10p0;
	n_out10p0 = n_out8p0 + n_in10p1;

// ScalarFunc:9
	float n_out9p0;
	n_out9p0 = round(n_out10p0);

// ScalarOp:12
	float n_in12p1 = -1.00000;
	float n_out12p0;
	n_out12p0 = n_out9p0 + n_in12p1;

// ScalarFunc:13
	float n_out13p0;
	n_out13p0 = abs(n_out12p0);

// Output:0
	COLOR.rgb = n_out24p0;
	COLOR.a = n_out13p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 801, 76 )
mode = 1
flags/light_only = false
nodes/vertex/0/position = Vector2( 520, 180 )
nodes/fragment/0/position = Vector2( 1600, 200 )
nodes/fragment/2/node = SubResource( 10 )
nodes/fragment/2/position = Vector2( 200, -200 )
nodes/fragment/3/node = SubResource( 16 )
nodes/fragment/3/position = Vector2( 400, -200 )
nodes/fragment/4/node = SubResource( 17 )
nodes/fragment/4/position = Vector2( 600, -200 )
nodes/fragment/5/node = SubResource( 18 )
nodes/fragment/5/position = Vector2( 820, -200 )
nodes/fragment/6/node = SubResource( 19 )
nodes/fragment/6/position = Vector2( 820, -20 )
nodes/fragment/7/node = SubResource( 20 )
nodes/fragment/7/position = Vector2( 1020, -200 )
nodes/fragment/8/node = SubResource( 21 )
nodes/fragment/8/position = Vector2( 200, 200 )
nodes/fragment/9/node = SubResource( 22 )
nodes/fragment/9/position = Vector2( 600, 200 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 400, 200 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( 800, 200 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 1000, 200 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( 1060, 420 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( 400, 440 )
nodes/fragment/16/node = SubResource( 6 )
nodes/fragment/16/position = Vector2( 600, 440 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 800, 440 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( 1000, 520 )
nodes/fragment/19/node = SubResource( 9 )
nodes/fragment/19/position = Vector2( 1220, 440 )
nodes/fragment/20/node = SubResource( 11 )
nodes/fragment/20/position = Vector2( 820, 700 )
nodes/fragment/21/node = SubResource( 12 )
nodes/fragment/21/position = Vector2( 600, 700 )
nodes/fragment/22/node = SubResource( 13 )
nodes/fragment/22/position = Vector2( 400, 700 )
nodes/fragment/23/node = SubResource( 14 )
nodes/fragment/23/position = Vector2( 1000, 700 )
nodes/fragment/24/node = SubResource( 15 )
nodes/fragment/24/position = Vector2( 1520, 600 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 4, 0, 4, 0, 5, 0, 4, 1, 6, 0, 5, 0, 7, 0, 6, 0, 7, 1, 7, 0, 8, 0, 8, 0, 10, 0, 10, 0, 9, 0, 9, 0, 12, 0, 12, 0, 13, 0, 13, 0, 0, 1, 8, 0, 15, 0, 15, 0, 16, 0, 16, 0, 17, 0, 17, 0, 18, 0, 18, 0, 19, 1, 14, 0, 19, 0, 22, 0, 21, 0, 21, 0, 20, 0, 20, 0, 23, 0, 8, 0, 22, 0, 19, 0, 24, 0, 23, 0, 24, 1, 24, 0, 0, 0 )

[resource]
shader = SubResource( 23 )
